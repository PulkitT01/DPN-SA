/gpfs/bwfor/home/tu/tu_tu/tu_wwdth01/DPN-SA/Jobs/Propensity_socre_network.py:98: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  network.load_state_dict(torch.load(model_path, map_location=device))
/gpfs/bwfor/home/tu/tu_tu/tu_wwdth01/DPN-SA/Jobs/Propensity_socre_network.py:98: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  network.load_state_dict(torch.load(model_path, map_location=device))
/gpfs/bwfor/home/tu/tu_tu/tu_wwdth01/DPN-SA/Jobs/DCN_network.py:170: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  network.load_state_dict(torch.load(model_path, map_location=device))
Traceback (most recent call last):
  File "/gpfs/bwfor/home/tu/tu_tu/tu_wwdth01/DPN-SA/Jobs/main_propensity_dropout.py", line 34, in <module>
    Experiments().run_all_experiments(iterations=10, running_mode="original_data")
  File "/gpfs/bwfor/home/tu/tu_tu/tu_wwdth01/DPN-SA/Jobs/Experiments.py", line 85, in run_all_experiments
    reply = dp_sa.test_DCN(iter_id,
  File "/gpfs/bwfor/home/tu/tu_tu/tu_wwdth01/DPN-SA/Jobs/DPN_SA_Deep.py", line 124, in test_DCN
    NN_policy_risk, NN_err_fact = self.__test_DCN_NN(iter_id,
  File "/gpfs/bwfor/home/tu/tu_tu/tu_wwdth01/DPN-SA/Jobs/DPN_SA_Deep.py", line 530, in __test_DCN_NN
    policy_risk, err_fact = self.__do_test_DCN(data_loader_dict_NN,
  File "/gpfs/bwfor/home/tu/tu_tu/tu_wwdth01/DPN-SA/Jobs/DPN_SA_Deep.py", line 634, in __do_test_DCN
    self.__process_evaluated_metric(
  File "/gpfs/bwfor/home/tu/tu_tu/tu_wwdth01/DPN-SA/Jobs/DPN_SA_Deep.py", line 663, in __process_evaluated_metric
    att = np.mean(np_y_f[t_np > 0]) - np.mean(np_y_f[(1 - t_np + e_np) > 1])
IndexError: too many indices for array: array is 1-dimensional, but 2 were indexed
